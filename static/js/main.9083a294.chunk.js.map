{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","_ref","title","poster","genres","synopsis","react_default","a","createElement","className","MoviePoster","alt","map","genre","index","MovieGenre","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","_ref2","src","_ref3","App","state","_getMovies","_callee","movies","regenerator_default","wrap","_context","prev","next","_this","_callApi","sent","setState","stop","fetch","then","response","json","data","catch","err","console","log","_renderMovies","slice","movie","src_Movie","title_english","medium_cover_image","id","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUAuCeA,MAlCf,SAAAC,GAAkD,IAAlCC,EAAkCD,EAAlCC,MAAOC,EAA2BF,EAA3BE,OAAQC,EAAmBH,EAAnBG,OAAQC,EAAWJ,EAAXI,SACrC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAACE,EAAD,CAAaP,OAAQA,EAAQQ,IAAKT,KAEpCI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,UAAKN,GACLI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZL,EAAOQ,IAAI,SAACC,EAAOC,GAClB,OAAOR,EAAAC,EAAAC,cAACO,EAAD,CAAYF,MAAOA,EAAOG,IAAKF,OAG1CR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CACEW,KAAMb,EACNc,QAAQ,IACRC,SAAS,OACTC,WAAS,EACTC,QAAQ,gBAoBpB,SAASZ,EAATa,GAAoC,IAAdpB,EAAcoB,EAAdpB,OAAQQ,EAAMY,EAANZ,IAC5B,OACEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBP,MAAOS,EAAKa,IAAKrB,EAAQQ,IAAKA,IAIjE,SAASI,EAATU,GAA6B,IAARZ,EAAQY,EAARZ,MACnB,OACEP,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAgBI,OChDfa,6MAInBC,MAAQ,KAQRC,gCAAa,SAAAC,IAAA,IAAAC,EAAA,OAAAC,EAAAxB,EAAAyB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUC,EAAKC,WADf,OACLP,EADKG,EAAAK,KAGXF,EAAKG,SAAS,CACZT,WAJS,wBAAAG,EAAAO,SAAAX,QAQbQ,SAAW,WACT,OAAOI,MAAM,iEACZC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKf,SACvBgB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAI5BG,cAAgB,WAUd,OATed,EAAKT,MAAMG,OAAOqB,MAAM,EAAG,GAAGvC,IAAI,SAACwC,EAAOtC,GACvD,OAAOR,EAAAC,EAAAC,cAAC6C,EAAD,CACLnD,MAAOkD,EAAME,cACbnD,OAAQiD,EAAMG,mBACdvC,IAAKoC,EAAMI,GACXpD,OAAQgD,EAAMhD,OACdC,SAAY+C,EAAM/C,iGA1BtBoD,KAAK7B,8CAgCE,IACCE,EAAW2B,KAAK9B,MAAhBG,OACR,OACExB,EAAAC,EAAAC,cAAA,OAAKC,UAAaqB,EAAS,MAAQ,gBAChC2B,KAAK9B,MAAMG,OAAS2B,KAAKP,gBAAkB,kBA7CnBQ,aCQbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC","file":"static/js/main.9083a294.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis';\r\nimport './Movie.css';\r\n\r\nfunction Movie({title, poster, genres, synopsis}) {\r\n  return (\r\n    <div className=\"Movie\">\r\n      <div className=\"Movie__Columns\">\r\n        <MoviePoster poster={poster} alt={title} />\r\n      </div>\r\n      <div className=\"Movie__Columns\">\r\n        <h1>{title}</h1>\r\n        <div className=\"Movie__Genres\">\r\n          {genres.map((genre, index) => {\r\n            return <MovieGenre genre={genre} key={index}/>\r\n          })}\r\n        </div>\r\n        <div className=\"Movie__Synopsis\">\r\n          <LinesEllipsis\r\n            text={synopsis}\r\n            maxLine='3'\r\n            ellipsis=' ...'\r\n            trimRight\r\n            basedOn='letters'\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nMovie.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  poster: PropTypes.string.isRequired,\r\n  genres: PropTypes.array.isRequired,\r\n  synopsis: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie;\r\n\r\n\r\n// 어떤 컴포넌트는 복잡한 기능 없이 간단한 값만 리턴하는 경우가 있다. 이 때 함수형(functional) 컴포넌트 사용한다...\r\n// 컴포넌트 라이프사이클 메소드는 없고, return만 있음\r\nfunction MoviePoster({poster, alt}) {\r\n  return (\r\n    <img className=\"Movie__Poster\" title={alt} src={poster} alt={alt} />\r\n  );\r\n}\r\n\r\nfunction MovieGenre({genre}) {\r\n  return(\r\n    <span className=\"Movie__Genre\">{genre}</span>\r\n  )\r\n}\r\n\r\n// 함수형 컴포넌트 사용 할 때 proptype 체크하고 싶은 경우 아래와 같이 사용\r\nMoviePoster.propTypes = {\r\n  poster: PropTypes.string.isRequired,\r\n  alt: PropTypes.string.isRequired\r\n};\r\n\r\nMovieGenre.propTypes = {\r\n  genre: PropTypes.string.isRequired\r\n}\r\n\r\n","import React, { Component } from 'react'\nimport './App.css';\nimport Movie from './Movie';\n\nexport default class App extends Component {\n  // Render: componentWillMount() -> render() -> componentDidMount()\n  // Update: componentWillReceiveProps() -> shouldComponentUpdate() == true -> componentWillUpdate() -> render() -> componentDidUpdate()\n\n  state = {};\n\n  // Promise is a very new JS CONCEPT!\n  // Promise is ASYNCHRONOUS\n  componentDidMount() {\n    this._getMovies();\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi();\n    // code below waits until the completion of _callApi function\n    this.setState({\n      movies\n    })\n  }\n\n  _callApi = () => {\n    return fetch('https://yts.lt/api/v2/list_movies.json?sort_by=download_count')\n    .then(response => response.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err))\n  }\n\n  // why underscore? 리액트 자체 기능과 나의 기능에 차이를 두기 위함이다..!\n  _renderMovies = () => {\n    const movies = this.state.movies.slice(0, 9).map((movie, index) => {\n      return <Movie \n        title={movie.title_english} \n        poster={movie.medium_cover_image} \n        key={movie.id} \n        genres={movie.genres} \n        synopsis = {movie.synopsis}\n      />\n    });\n    return movies;\n  }\n\n  render() {\n    const { movies } = this.state;\n    return (\n      <div className = {movies ? \"App\" : \"App--loading\"}>\n        {this.state.movies ? this._renderMovies() : \"Loading\"}\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}